name: Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  phpunit:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
  
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['8.0']  
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    runs-on: ubuntu-latest
    env:
      DB_CONNECTION: mysql
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis   

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, dom, fileinfo, mysql
        coverage: xdebug
        
    - uses: actions/checkout@v2
      
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache composer dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
    - name: Prepare the application
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        php artisan key:generate
        
    - name: Clear Config
      run: php artisan config:clear
      
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      
    - name: Run Migration
      run: php artisan migrate -v
      env:
        DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
        
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      run: vendor/bin/phpunit --coverage-clover coverage.xml
      env:
        DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        file: coverage.xml
